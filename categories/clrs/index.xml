<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clrs on 找一个吃麦旋风的理由</title>
    <link>https://zero4drift.github.io/categories/clrs/</link>
    <description>Recent content in Clrs on 找一个吃麦旋风的理由</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 04 Dec 2018 16:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://zero4drift.github.io/categories/clrs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-26</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-26/</link>
      <pubDate>Tue, 04 Dec 2018 16:35:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-26/</guid>
      <description>maximum_flow 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  #include &amp;#34;chapter-22/bfs_graph/bfs_graph.h&amp;#34;#include &amp;#34;chapter-26/maximum_flow_utilities.h&amp;#34;namespace CLRS { void ford_fulkserson(MaximumFlowLinkedListGraph &amp;amp;g, std::size_t s, std::size_t t) { auto p = maximum_bfs_graph(g, s, t); while(p.size()) { unsigned min_cf = -1; for(const auto &amp;amp;ev : p) { if(get_cf(g.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-25</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-25/</link>
      <pubDate>Thu, 29 Nov 2018 23:13:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-25/</guid>
      <description>all_pairs_shortest_paths floyd_warshall 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  #include &amp;#34;chapter-22/vertex_graph/vertex_graph.h&amp;#34;#include &amp;#34;chapter-25/all_pairs_shortest_paths/all_pairs_shortest_paths_utilities.h&amp;#34;namespace CLRS { std::vector&amp;lt;std::vector&amp;lt;APSPMatrixElement&amp;gt;&amp;gt; floyd_warshall (const std::vector&amp;lt;std::vector&amp;lt;APSPMatrixElement&amp;gt;&amp;gt; &amp;amp;w) { std::size_t n = w.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-24</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-24/</link>
      <pubDate>Wed, 28 Nov 2018 17:12:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-24/</guid>
      <description>single_source_shortest_paths dag_shortest_paths 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include &amp;#34;chapter-22/dfs_graph/dfs_graph.h&amp;#34;#include &amp;#34;chapter-22/linked_list_graph/linked_list_graph.h&amp;#34;#include &amp;#34;chapter-24/single_source_shortest_paths/sssp_utilities.h&amp;#34;namespace CLRS { void dag_shortest_paths (LinkedListGraph&amp;lt;SSSPDFSVertexGraph, SSSPWeightEdgeGraph&amp;lt;SSSPDFSVertexGraph&amp;gt;&amp;gt; &amp;amp;g, std::size_t s) { auto l = topological_sort_graph(g); initialize_single_source(g, s); for(std::size_t u : l) { for(const auto &amp;amp;ev : g.get_adj_vertexes(u)) sssp_relax(g, g.edgesr()[ev]); } } }    dijkstra 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  #include &amp;#34;chapter-19/fibonacci_heap/fibonacci_heap.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-22</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-22/</link>
      <pubDate>Thu, 22 Nov 2018 19:50:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-22/</guid>
      <description>bfs_graph 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86  #include &amp;#34;chapter-22/edge_graph/edge_graph.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-21</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-21/</link>
      <pubDate>Sat, 17 Nov 2018 21:35:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-21/</guid>
      <description>linked_list_disjoint_set 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122  namespace CLRS { template &amp;lt;typename T&amp;gt; classLinkedListDisjointSet; template &amp;lt;typename T&amp;gt; classLinkedListDisjointSetNode; template &amp;lt;typename T&amp;gt; std::shared_ptr&amp;lt;LinkedListDisjointSet&amp;lt;T&amp;gt;&amp;gt; linked_list_disjoint_make_set(const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void linked_list_disjoint_union(const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;, const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; std::shared_ptr&amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; linked_list_disjoint_find_set(const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; struct LinkedListDisjointSet { using LLDSN = LinkedListDisjointSetNode&amp;lt;T&amp;gt;; using LLDSN_SHR = std::shared_ptr&amp;lt;LLDSN&amp;gt;; LinkedListDisjointSet(const std::shared_ptr &amp;lt;LLDSN&amp;gt; &amp;amp;x): head(x), tail(head), length(1) {} LLDSN_SHR get_head() const {return head;} void set_head(const LLDSN_SHR &amp;amp;p) {head = p;} LLDSN_SHR get_tail() const {return tail;} void set_tail(const LLDSN_SHR &amp;amp;p) {tail = p;} std::size_t get_length() {return length;} void add_length(std::size_t l) {length += l;} private: LLDSN_SHR head; LLDSN_SHR tail; std::size_t length = 0; }; template &amp;lt;typename T&amp;gt; struct LinkedListDisjointSetNode { using LLDS = LinkedListDisjointSet&amp;lt;T&amp;gt;; using LLDSN = LinkedListDisjointSetNode; using LLDS_SHR = std::shared_ptr&amp;lt;LLDS&amp;gt;; using LLDSN_SHR = std::shared_ptr&amp;lt;LLDSN&amp;gt;; LinkedListDisjointSetNode(T x): key(x) {} T get_key() const {return key;} LLDS_SHR get_set_p() const {return set_p;} void set_set_p(const LLDS_SHR &amp;amp;p) {set_p = p;} LLDSN_SHR get_next() {return next;} void set_next(const LLDSN_SHR &amp;amp;n) {next = n;} private: T key; LLDS_SHR set_p; LLDSN_SHR next; }; template &amp;lt;typename T&amp;gt; std::shared_ptr&amp;lt;LinkedListDisjointSet&amp;lt;T&amp;gt;&amp;gt; linked_list_disjoint_make_set(const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;x) { auto set = std::make_shared&amp;lt;LinkedListDisjointSet&amp;lt;T&amp;gt;&amp;gt;(x); x-&amp;gt;set_set_p(set); return set; } template &amp;lt;typename T&amp;gt; void linked_list_disjoint_union(const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;x, const std::shared_ptr &amp;lt;LinkedListDisjointSetNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;y) { auto x_set_p = x-&amp;gt;get_set_p(); std::size_t x_set_len = x_set_p-&amp;gt;get_length(); auto y_set_p = y-&amp;gt;get_set_p(); std::size_t y_set_len = y_set_p-&amp;gt;get_length(); if(x_set_len &amp;lt;= y_set_len) { auto x_head = x_set_p-&amp;gt;get_head(); auto x_tail = x_set_p-&amp;gt;get_tail(); // update the set_p data member of objects in linked list 	for(auto shr = x_head; shr !</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-20</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-20/</link>
      <pubDate>Thu, 15 Nov 2018 18:26:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-20/</guid>
      <description>proto_veb_treeinclude &amp;#34;chapter-20/veb_tree_utilities.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-19</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-19/</link>
      <pubDate>Thu, 25 Oct 2018 23:23:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-19/</guid>
      <description>fibonacci_heapnamespace CLRS { template &amp;lt;typename T&amp;gt; classFibHeap; template &amp;lt;typename T&amp;gt; classFibHeapTreeNode; template &amp;lt;typename T&amp;gt; FibHeap&amp;lt;T&amp;gt; make_fib_heap(); template &amp;lt;typename T&amp;gt; void fib_heap_insert(const FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; fib_heap_minimum(const FibHeap&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; FibHeap&amp;lt;T&amp;gt; fib_heap_union(const FibHeap&amp;lt;T&amp;gt; &amp;amp;, const FibHeap&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; fib_heap_extract_min(FibHeap&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void consolidate(FibHeap&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void fib_heap_link(const FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void fib_heap_decrease_key(FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;, T); template &amp;lt;typename T&amp;gt; void cut(const FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void cascading_cut(const FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); template &amp;lt;typename T&amp;gt; void fib_heap_delete(FibHeap&amp;lt;T&amp;gt; &amp;amp;, const std::shared_ptr&amp;lt;FibHeapTreeNode&amp;lt;T&amp;gt;&amp;gt; &amp;amp;); /* * doubly linked circular list helper functions */ // just assign itself to the left and right of node.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-18</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-18/</link>
      <pubDate>Mon, 22 Oct 2018 17:56:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-18/</guid>
      <description>B_treeshere all b tree nodes allocated in heap, not disk.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-16</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-16/</link>
      <pubDate>Tue, 16 Oct 2018 20:25:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-16/</guid>
      <description>greedy_activity_selector 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  namespace CLRS { template &amp;lt;std::size_t j&amp;gt; void recursive_activity_selector(unsigned (&amp;amp;s)[j], unsigned (&amp;amp;f)[j], unsigned k, unsigned n, std::vector&amp;lt;unsigned&amp;gt; &amp;amp;r) { std:size_t m = k + 1; while(m &amp;lt;= n &amp;amp;&amp;amp; s[m] &amp;lt; f[k]) ++m; if(m &amp;lt;= n) { r.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-15</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-15/</link>
      <pubDate>Mon, 15 Oct 2018 16:29:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-15/</guid>
      <description>optimal_binary_search_tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  namespace CLRS { template &amp;lt;std::size_t n&amp;gt; void optimal_bst(double (&amp;amp;p)[n], double (&amp;amp;q)[n], double (&amp;amp;e)[n + 1][n], std::size_t(&amp;amp;root)[n][n]) { double w[n + 1][n]; for(std::size_t i = 1; i &amp;lt;= n; ++i) { e[i][i - 1] = q[i - 1]; w[i][i - 1] = q[i - 1]; } for(std::size_t l = 1; l !</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-14</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-14/</link>
      <pubDate>Wed, 10 Oct 2018 19:01:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-14/</guid>
      <description>interval_treeinclude &amp;#34;chapter-13/red_black_tree/red_black_tree.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-13</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-13/</link>
      <pubDate>Mon, 08 Oct 2018 20:42:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-13/</guid>
      <description>red_black_tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339  namespace CLRS { constexpr char REDBLACK_RED = &amp;#39;R&amp;#39;; constexpr char REDBLACK_BLACK = &amp;#39;B&amp;#39;; template &amp;lt;typename T&amp;gt; classRedBlackTreeNode; template &amp;lt;typename T&amp;gt; classRedBlackTree { RedBlackTreeNode&amp;lt;T&amp;gt; nil; RedBlackTreeNode&amp;lt;T&amp;gt; *root; public: RedBlackTree() {nil.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-12</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-12/</link>
      <pubDate>Fri, 05 Oct 2018 18:27:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-12/</guid>
      <description>binary_search_tree 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131  namespace CLRS { // recursive version of search  template &amp;lt;typename T&amp;gt; TreeNode&amp;lt;T&amp;gt; *tree_search(TreeNode&amp;lt;T&amp;gt; *x, T k) { if(x == nullptr || k == x-&amp;gt;get_value()) return x; if(k &amp;lt; x-&amp;gt;get_value()) return tree_search(x-&amp;gt;get_left(), k); else return tree_search(x-&amp;gt;get_right(), k); } // iterative version of serach  template &amp;lt;typename T&amp;gt; TreeNode&amp;lt;T&amp;gt; *iterative_tree_search(TreeNode&amp;lt;T&amp;gt; *x, T k) { while(x !</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-11</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-11/</link>
      <pubDate>Mon, 01 Oct 2018 14:28:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-11/</guid>
      <description>hash_table_chaining 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  #include &amp;#34;chapter-10/list/list.h&amp;#34;namespace CLRS { template &amp;lt;typename T, std::size_t m, std::size_t m_d, std::size_t p_m&amp;gt; classHashTableChaining; template &amp;lt;typename T, std::size_t m, std::size_t m_d, std::size_t p_m&amp;gt; void chained_hash_insert(HashTableChaining&amp;lt;T, m, m_d, p_m&amp;gt; &amp;amp;, ListNode&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T, std::size_t m, std::size_t m_d, std::size_t p_m&amp;gt; ListNode&amp;lt;T&amp;gt; *chained_hash_search(HashTableChaining&amp;lt;T, m, m_d, p_m&amp;gt; &amp;amp;, T); template &amp;lt;typename T, std::size_t m, std::size_t m_d, std::size_t p_m&amp;gt; void chained_hash_delete(HashTableChaining&amp;lt;T, m, m_d, p_m&amp;gt; &amp;amp;, ListNode&amp;lt;T&amp;gt; &amp;amp;); template &amp;lt;typename T, std::size_t m, std::size_t m_d, std::size_t p_m&amp;gt; classHashTableChaining { List&amp;lt;T&amp;gt; array[m]; public: List&amp;lt;T&amp;gt; &amp;amp;operator[](std::size_t i) {return array[i];} /* template needs explicitly instanced * with template non-type parameter m, * m is a prime number which is not close * to any power of 2.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-10</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-10/</link>
      <pubDate>Sun, 30 Sep 2018 19:35:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-10/</guid>
      <description>stack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  namespace CLRS { template &amp;lt;typename T, std::size_t n&amp;gt; classStack; template &amp;lt;typename T, std::size_t n&amp;gt; bool stack_empty(const Stack&amp;lt;T, n&amp;gt; &amp;amp;s) { if(!s.top) return true; else return false; } template &amp;lt;typename T, std::size_t n&amp;gt; void push(Stack&amp;lt;T, n&amp;gt; &amp;amp;s, T x) { std::size_t l = s.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-8</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-8/</link>
      <pubDate>Tue, 18 Sep 2018 21:45:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-8/</guid>
      <description>bucket_sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  namespace CLRS { /* * Suppose elements of array uniformly and individually * scattered in half open interval [0, 1) * TODO: this time uses standard library list and iterator, * this program would be refactored after list implementation.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-9</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-9/</link>
      <pubDate>Tue, 18 Sep 2018 18:10:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-9/</guid>
      <description>select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79  #include &amp;#34;chapter-2/insertion_sort/insertion_sort.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-7</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-7/</link>
      <pubDate>Mon, 17 Sep 2018 22:09:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-7/</guid>
      <description>randomized_quicksort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #include &amp;#34;chapter-7/quicksort/quicksort.h&amp;#34;namespace CLRS { template &amp;lt;typename T, std::size_t n&amp;gt; std::size_t randomized_partition(T (&amp;amp;a)[n], long long p, long long r) { std::default_random_engine e(std::time(0)); std::uniform_int_distribution&amp;lt;long long&amp;gt; u(p, r); long long i = u(e); T temp = a[r]; a[r] = a[i]; a[i] = temp; return CLRS::partition(a, p, r); } template &amp;lt;typename T, std::size_t n&amp;gt; void randomized_quicksort(T (&amp;amp;a)[n], long long p, long long r) { if(p &amp;lt; r) { std::size_t q = randomized_partition(a, p, r); randomized_quicksort(a, p, q - 1); randomized_quicksort(a, q + 1, r); } } }    quicksort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  namespace CLRS { template &amp;lt;typename T, std::size_t n&amp;gt; std::size_t partition(T (&amp;amp;a)[n], long long p, long long r) { T x = a[r]; std::size_t i = p; for(std::size_t j = p; j !</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-6</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-6/</link>
      <pubDate>Sat, 15 Sep 2018 19:10:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-6/</guid>
      <description>heapsort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  #include &amp;#34;../build_max_min_heap/build_max_min_heap.h&amp;#34;#include &amp;#34;../max_min_heapify/max_min_heapify.h&amp;#34;namespace CLRS { template &amp;lt;typename T, std::size_t n&amp;gt; void heapsort(T (&amp;amp;a)[n]) { CLRS::build_max_heap(a); for(std::size_t i = n - 1; i &amp;gt;= 1; --i) { T temp = a[i]; a[i] = a[0]; a[0] = temp; if(i &amp;gt;= 2) CLRS::max_heapify(a, 0, i); } } /* * use minimal heap priority queue * result sorted from large to small.</description>
    </item>
    
    <item>
      <title>CLRS-Cpp-Implementations-Chapter-5</title>
      <link>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-5/</link>
      <pubDate>Tue, 11 Sep 2018 20:04:00 +0800</pubDate>
      
      <guid>https://zero4drift.github.io/post/clrs-cpp-implementations-chapter-5/</guid>
      <description>hire_assistant_permute_by_sorting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include &amp;#34;chapter-2/merge_sort/merge_sort.h&amp;#34;namespace CLRS { template &amp;lt;typename T&amp;gt; bool operator&amp;lt;=(std::pair&amp;lt;T, unsigned&amp;gt; p1, std::pair&amp;lt;T, unsigned&amp;gt; p2) { return p1.second &amp;lt;= p2.second; } template &amp;lt;typename T, std::size_t n&amp;gt; void permute_by_sorting(T (&amp;amp;array)[n]) { std::default_random_engine e(std::time(0)); std::uniform_int_distribution&amp;lt;unsigned&amp;gt; u(0, (n-1)*(n-1)*(n-1)); std::pair&amp;lt;T, unsigned&amp;gt; parray[n]; for(std::size_t i = 0; i != n; ++i) parray[i] = std::pair&amp;lt;T, unsigned&amp;gt;(array[i], u(e)); CLRS::merge_sort(parray, 0, n - 1); for(std::size_t i = 0; i !</description>
    </item>
    
  </channel>
</rss>